
#include "vex.h"

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// Controller1          controller                    
// LeftDrive            motor         1               
// RightDrive           motor         10              
// RightIntake          motor         8               
// LeftIntake           motor         2               
// RightLift            motor         9               
// LeftLift             motor         3               
// Vision6              vision        6               
// BarMotor             motor         4               
// FrontRightDrive      motor         19              
// FrontLeftDrive       motor         11              
// Distance14           distance      14              
// ---- END VEXCODE CONFIGURED DEVICES ----
#include <cmath>
#include "MoveThread.h"
#include "Move.h"

#define INVERT_TURNS -1 // 1 if left side, -1 if right
#define VISION_BALL Vision6__R_BALL // Vision6__R_BALL if red, Vision6__B_BALL if blue

using namespace vex;
competition Competition;

int AmmonX;
int driveX;
int driveY;
int ldrive;
int rdrive;
double driveScale;
int blueSize;
int redSize;

void maxVal()
{
  driveScale = 1;
 if (abs(driveY) + abs(driveX) > 100)
 {
   driveScale = 100 / (abs(driveY) + abs(driveX));
   driveX = driveScale * driveX;
   driveY = driveScale * driveY;
 }
}
/*
void SensorControl()
{
  if (driveX < 5 && driveX > -5)
  {
    if(Vision6.largestObject.centerX < 140 && Vision6.largestObject.centerX > 120)
    {
      driveX += -5;
    }
    else if (Vision6.largestObject.centerX <= 120 && Vision6.largestObject.centerX > 80)
    {
      driveX += -10;
    }
    else if(Vision6.largestObject.centerX > 160 && Vision6.largestObject.centerX < 180)
    {
      driveX += 5;
    }
    else if (Vision6.largestObject.centerX >= 180 && Vision6.largestObject.centerX < 210)
    {
      driveX += 10; 
    }
  }
}
*/
void SensorControl()
{
 if(Vision6.largestObject.centerX > 100 && Vision6.largestObject.centerX < 200)
 {
   driveX += (Vision6.largestObject.centerX - 150) / 3;
 }
}
void multipleColor()
{
  Vision6.takeSnapshot(Vision6__B_BALL);
  blueSize = Vision6.largestObject.height * Vision6.largestObject.width;
  Vision6.takeSnapshot(Vision6__R_BALL);
  redSize =  Vision6.largestObject.height * Vision6.largestObject.width;
  if(blueSize > redSize)
  {
    Vision6.takeSnapshot(Vision6__B_BALL);
  }
}

void chainControl()
{
  // Lift and Feed Controls
  if(Controller1.ButtonL1.pressing())
  {
    LeftIntake.spin(forward, 100, pct);
    LeftLift.spin(forward, 100, pct);
    RightIntake.spin(forward, 100, pct);
    RightLift.spin(forward, 100, pct);
  }
  else if(Controller1.ButtonL2.pressing())
  {
    LeftIntake.spin(reverse, 100, pct);
    LeftLift.spin(reverse, 100, pct);
    RightIntake.spin(reverse, 100, pct);
    RightLift.spin(reverse, 100, pct);
  }
  else if(Controller1.ButtonR1.pressing())
  {
    LeftIntake.spin(forward, 100, pct);
    LeftLift.spin(forward, 0, pct);
    RightIntake.spin(forward, 100, pct);
    RightLift.spin(forward, 0, pct);
  }
  else if(Controller1.ButtonR2.pressing())
  {
    LeftIntake.spin(reverse, 100, pct);
    LeftLift.spin(forward, 0, pct);
    RightIntake.spin(reverse, 100, pct);
    RightLift.spin(forward, 0, pct);
  }
  else
  {
    LeftIntake.spin(forward, 0, pct);
    LeftLift.spin(forward, 0, pct);
    RightIntake.spin(forward, 0, pct);
    RightLift.spin(forward, 0, pct);
  }

  // Flippery Guy
  if(Controller1.ButtonA.pressing())
  {
    BarMotor.spin(forward, 100, pct);
  }
  else if (Controller1.ButtonB.pressing())
  {
    BarMotor.spin(reverse, 100, pct);
  }
  else
  {
    BarMotor.spin(forward, 0, pct);
  }
}

// Beginning of match functions
void pre_auton(void)
{
  vexcodeInit();
}

  //Autonomous Function(s):
void autonomous(void)
{
  //Move::moveDeg(180, LeftDrive, FrontLeftDrive, RightDrive, FrontRightDrive);
  /*
 // dump preload into center goal

 
  // turn right
  RightDrive.spin(reverse, 100 * INVERT_TURNS, pct);
  LeftDrive.spin(forward, 100 * INVERT_TURNS, pct);
  
  wait(140, msec);

  // stop
  RightDrive.spin(reverse, 0, pct);
  LeftDrive.spin(forward, 0, pct);

  // start intakes
  LeftIntake.spin(forward, 100, pct);
  RightIntake.spin(forward, 100, pct);
  LeftLift.spin(forward, 100, pct);
  RightLift.spin(forward, 100,pct);

  wait(1000, msec);

  // stop intakes  
  LeftIntake.spin(forward, 0, pct);
  RightIntake.spin(forward, 0, pct);
  LeftLift.spin(forward, 0, pct);
  RightLift.spin(forward, 0, pct);

  // turn right 
  LeftDrive.spin(forward, 80 * INVERT_TURNS, pct);
  RightDrive.spin(reverse, 80 * INVERT_TURNS, pct);

  wait(400, msec);

  // arc to corner and engage intakes
  // RightDrive.spin(forward, 80 * INVERT_TURNS, pct);
  // LeftDrive.spin(forward, 45 * INVERT_TURNS, pct);
  RightDrive.spin(forward, 62.5 + (17.5 * INVERT_TURNS), pct);
  LeftDrive.spin(forward, 62.5 - (17.5 * INVERT_TURNS), pct);
  LeftIntake.spin(forward, 80, pct);
  RightIntake.spin(forward, 80, pct);

  wait(2100, msec);

  // engage intake and lift
  LeftIntake.spin(forward, 80, pct);
  RightIntake.spin(forward, 80, pct);
  LeftLift.spin(forward, 80, pct);
  RightLift.spin(forward, 80, pct);

  // vision sensor corrections
  for(int i = 0; i< 50; i++)
  {
    ldrive = 40;
    rdrive = 20;
    Vision6.takeSnapshot(VISION_BALL);
    if(Vision6.largestObject.centerX > 170)
    {
      ldrive += 15;
      rdrive -= 15;
    }
    else if(Vision6.largestObject.centerX < 140)
    {
      ldrive -= 15;
      rdrive += 15;
    }
      LeftDrive.spin(forward, ldrive, pct);
      RightDrive.spin(forward, rdrive, pct);
      wait(10, msec);
  }
      

  // lift and intake stop
  RightIntake.spin(forward, 0, pct);
  LeftIntake.spin(forward, 0, pct);
  LeftLift.spin(forward, 0, pct);
  RightLift.spin(forward, 0, pct);

  // reverse
  LeftDrive.spin(reverse, 80, pct);
  RightDrive.spin(reverse, 80, pct);

  wait(390, msec);

  // turn right
  LeftDrive.spin(forward, 80 * INVERT_TURNS, pct);
  RightDrive.spin(reverse, 80 * INVERT_TURNS, pct);

  wait(750, msec);

  // stop
  LeftDrive.spin(forward, 0, pct);
  RightDrive.spin(forward, 0, pct);

  wait(100, msec);
  
  // reverse
  RightDrive.spin(reverse, 80, pct);
  LeftDrive.spin(reverse, 80, pct);
  
  wait(700, msec);

  // stop
  LeftDrive.spin(forward, 0, pct);
  RightDrive.spin(forward, 0, pct);

  //dump ball into corner goal
  
  // engage intake and lift
  LeftIntake.spin(forward, 80, pct);
  RightIntake.spin(forward, 80, pct);
  LeftLift.spin(forward, 80, pct);
  RightLift.spin(forward, 80, pct);

  wait(3100, msec);
    
  // stop intake and lift
  RightIntake.spin(forward, 0, pct);
  LeftIntake.spin(forward, 0, pct);
  LeftLift.spin(forward, 0, pct);
  RightLift.spin(forward, 0, pct);

  // forward
  RightDrive.spin(forward, 80, pct);
  LeftDrive.spin(forward, 80, pct);

  wait(200, msec);

  // stop
  LeftDrive.spin(forward, 0, pct);
  RightDrive.spin(forward, 0, pct);
  */

   /*
  Vision Example
    for(int i = 0; i < 123; i++)
    {
      ldrive = 35;
      rdrive = 35;
      Vision6.takeSnapshot(Vision6__R_BALL);
      if(Vision6.largestObject.centerX < 140)
      {
        ldrive -= 5;
        rdrive += 5;
      }
      else if(Vision6.largestObject.centerX > 170)
      {
        ldrive += 5;
        rdrive -= 5;
      }
      LeftDrive.spin(forward, ldrive, pct);
      RightDrive.spin(forward, rdrive, pct);
      wait(10, msec);
    }
    */
    
}

//User Control Function(s):
void usercontrol(void)
{
  while(true)
  { 
    if(Controller1.ButtonDown.pressing())
    {
      for(int n = 0; n < 1; n++)
      {
         LeftDrive.spin(forward, 100, pct);
         RightDrive.spin(reverse, 100, pct);
         FrontLeftDrive.spin(forward, 100, pct);
         FrontRightDrive.spin(reverse, 100, pct);
         wait(750, msec);
         LeftDrive.setStopping(brake);
         RightDrive.setStopping(brake);
         FrontLeftDrive.setStopping(brake);
         FrontRightDrive.setStopping(brake);
         // Move::moveDeg(180, LeftDrive, FrontLeftDrive, RightDrive, FrontRightDrive);
      }
    }
    driveX = .6 * Controller1.Axis1.position();
    driveY = .85 * Controller1.Axis3.position();

    //Vision6.takeSnapshot(VISION_BALL);
    if(Distance14.objectDistance(mm) > 250 or Distance14.objectDistance(mm) == 0)
    {
      multipleColor();
      SensorControl();
    }

    //maxVal();
    
    LeftDrive.spin(forward, driveY + driveX, pct);
    RightDrive.spin(forward, driveY - driveX, pct);
    FrontLeftDrive.spin(forward, driveY + driveX, pct);
    FrontRightDrive.spin(forward, driveY - driveX, pct);
    chainControl();
    Controller1.Screen.clearScreen();
    Controller1.Screen.print("Distance: ");
    Controller1.Screen.print(Distance14.objectDistance(mm));
    Controller1.Screen.newLine();
    //Controller1.Screen.print("Size: ");
    //Controller1.Screen.print("Distance14.objectSize()");


    wait(5, msec);
  }
}

// Main Function:
int main() 
{
  Competition.autonomous(autonomous);
  Competition.drivercontrol(usercontrol);
  pre_auton();
}
